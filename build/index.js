// Generated by CoffeeScript 1.10.0
var configure,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

configure = function($) {
  var $async, $fs, $lodash, $minimist, $path, $process, BocoMigrate, CLI, FileStorageAdapter, IdentityNotUnique, IrreversibleMigration, MigrateError, Migration, MigrationNotFound, Migrator, NotImplemented, RedisStorageAdapter, StorageAdapter, ref, ref1, ref2, ref3, ref4, ref5;
  if ($ == null) {
    $ = {};
  }
  $process = (ref = $.process) != null ? ref : process;
  $async = (ref1 = $.async) != null ? ref1 : require("async");
  $lodash = (ref2 = $.lodash) != null ? ref2 : require("lodash");
  $minimist = (ref3 = $.minimist) != null ? ref3 : require("minimist");
  $path = (ref4 = $.path) != null ? ref4 : require("path");
  $fs = (ref5 = $.fs) != null ? ref5 : require("fs");
  MigrateError = (function(superClass) {
    extend(MigrateError, superClass);

    function MigrateError(props) {
      var key, val;
      MigrateError.__super__.constructor.call(this);
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      Error.captureStackTrace(this, this.constructor);
      this.name = this.constructor.name;
    }

    return MigrateError;

  })(Error);
  IdentityNotUnique = (function(superClass) {
    extend(IdentityNotUnique, superClass);

    function IdentityNotUnique() {
      return IdentityNotUnique.__super__.constructor.apply(this, arguments);
    }

    IdentityNotUnique.prototype.message = "Identity not unique";

    return IdentityNotUnique;

  })(MigrateError);
  MigrationNotFound = (function(superClass) {
    extend(MigrationNotFound, superClass);

    function MigrationNotFound() {
      return MigrationNotFound.__super__.constructor.apply(this, arguments);
    }

    MigrationNotFound.prototype.message = "Migration not found";

    return MigrationNotFound;

  })(MigrateError);
  IrreversibleMigration = (function(superClass) {
    extend(IrreversibleMigration, superClass);

    function IrreversibleMigration() {
      return IrreversibleMigration.__super__.constructor.apply(this, arguments);
    }

    IrreversibleMigration.prototype.message = "Irreversible Migration";

    return IrreversibleMigration;

  })(MigrateError);
  NotImplemented = (function(superClass) {
    extend(NotImplemented, superClass);

    function NotImplemented() {
      return NotImplemented.__super__.constructor.apply(this, arguments);
    }

    NotImplemented.prototype.message = "Not implemented";

    return NotImplemented;

  })(MigrateError);
  Migration = (function() {
    Migration.prototype.id = null;

    Migration.prototype.name = null;

    function Migration(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
    }

    Migration.prototype.up = function(done) {
      return done(new NotImplemented);
    };

    Migration.prototype.down = function(done) {
      return done(new IrreversibleMigration);
    };

    return Migration;

  })();
  StorageAdapter = (function() {
    function StorageAdapter(props) {
      var ref6;
      if (props == null) {
        props = {};
      }
      this.data = (ref6 = props.data) != null ? ref6 : {};
    }

    StorageAdapter.prototype.setLatestMigrationId = function(id, done) {
      return done(null, (this.data.latestMigrationId = id));
    };

    StorageAdapter.prototype.getLatestMigrationId = function(done) {
      return done(null, this.data.latestMigrationId);
    };

    return StorageAdapter;

  })();
  FileStorageAdapter = (function(superClass) {
    extend(FileStorageAdapter, superClass);

    FileStorageAdapter.prototype.path = null;

    function FileStorageAdapter(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
    }

    FileStorageAdapter.prototype.setLatestMigrationId = function(id, done) {
      var json;
      json = JSON.stringify({
        latestMigrationId: id
      });
      return $fs.writeFile(this.path, json, function(error) {
        return done(null, id);
      });
    };

    FileStorageAdapter.prototype.getLatestMigrationId = function(done) {
      return $fs.readFile(this.path, "utf8", (function(_this) {
        return function(error, json) {
          var error1;
          if ((error != null ? error.code : void 0) === "ENOENT") {
            return _this.setLatestMigrationId(null, done);
          }
          if (error != null) {
            return done(error);
          }
          try {
            return done(null, JSON.parse(json).latestMigrationId);
          } catch (error1) {
            error = error1;
            return done(error);
          }
        };
      })(this));
    };

    return FileStorageAdapter;

  })(StorageAdapter);
  RedisStorageAdapter = (function(superClass) {
    extend(RedisStorageAdapter, superClass);

    RedisStorageAdapter.prototype.redisClient = null;

    RedisStorageAdapter.prototype.keyPrefix = null;

    RedisStorageAdapter.prototype.keyJoinString = null;

    function RedisStorageAdapter(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.keyPrefix == null) {
        this.keyPrefix = "migrator";
      }
      if (this.keyJoinString == null) {
        this.keyJoinString = ":";
      }
    }

    RedisStorageAdapter.prototype.getKeyName = function(propName) {
      return [this.keyPrefix, propName].join(this.keyJoinString);
    };

    RedisStorageAdapter.prototype.setLatestMigrationId = function(id, done) {
      var keyName;
      keyName = this.getKeyName("latest_migration_id");
      return this.redisClient.set(keyName, id, done);
    };

    RedisStorageAdapter.prototype.getLatestMigrationId = function(done) {
      var keyName;
      keyName = this.getKeyName("latest_migration_id");
      return this.redisClient.get(keyName, done);
    };

    return RedisStorageAdapter;

  })(StorageAdapter);
  Migrator = (function() {
    Migrator.prototype.migrations = null;

    Migrator.prototype.storageAdapter = null;

    function Migrator(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        if (key !== "storageAdapter") {
          this[key] = val;
        }
      }
      if (this.migrations == null) {
        this.migrations = [];
      }
      this.setStorageAdapter(props.storageAdapter);
    }

    Migrator.prototype.setStorageAdapter = function(storageAdapter) {
      return this.storageAdapter = storageAdapter != null ? storageAdapter : new StorageAdapter;
    };

    Migrator.prototype.addMigration = function(migration) {
      if (!(migration instanceof Migration)) {
        migration = new Migration(migration);
      }
      this.migrations.push(migration);
      return migration;
    };

    Migrator.prototype.findMigrationById = function(id) {
      var index;
      index = this.findMigrationIndexById(id);
      return this.migrations[index];
    };

    Migrator.prototype.findMigrationIndexById = function(id) {
      var index;
      index = $lodash.findIndex(this.migrations, function(migration) {
        return migration.id === id;
      });
      if (!((index != null) && index > -1)) {
        throw new MigrationNotFound;
      }
      return index;
    };

    Migrator.prototype.getLatestMigrationIndex = function(done) {
      return this.storageAdapter.getLatestMigrationId((function(_this) {
        return function(error, latestId) {
          if (error != null) {
            return done(error);
          }
          if (latestId == null) {
            return done(null, -1);
          }
          return done(null, _this.findMigrationIndexById(latestId));
        };
      })(this));
    };

    Migrator.prototype.getUpMigrations = function(latestIndex, targetIndex) {
      var startIndex;
      if (latestIndex == null) {
        latestIndex = -1;
      }
      if (targetIndex == null) {
        targetIndex = this.collection.length - 1;
      }
      startIndex = latestIndex + 1;
      return this.migrations.slice(startIndex, targetIndex + 1);
    };

    Migrator.prototype.getDownMigrations = function(latestIndex, targetIndex) {
      var startIndex;
      if (latestIndex == null) {
        latestIndex = -1;
      }
      if (targetIndex == null) {
        targetIndex = -1;
      }
      startIndex = targetIndex + 1;
      return this.migrations.slice(startIndex, latestIndex + 1).reverse();
    };

    Migrator.prototype.migrate = function(targetId, done) {
      var targetIndex;
      if (targetId != null) {
        targetIndex = this.findMigrationIndexById(targetId);
      }
      if (targetIndex == null) {
        targetIndex = this.migrations.length - 1;
      }
      return this.getLatestMigrationIndex((function(_this) {
        return function(error, latestIndex) {
          var migrations;
          if (error != null) {
            return done(error);
          }
          if (targetIndex === latestIndex) {
            return done();
          }
          if (targetIndex > latestIndex) {
            migrations = _this.getUpMigrations(latestIndex, targetIndex);
            return _this.runUpMigrations(migrations, done);
          }
          if (targetIndex < latestIndex) {
            migrations = _this.getDownMigrations(latestIndex, targetIndex);
            return _this.runDownMigrations(migrations, done);
          }
        };
      })(this));
    };

    Migrator.prototype.rollback = function(done) {
      return this.getLatestMigrationIndex((function(_this) {
        return function(error, latestIndex) {
          if (latestIndex < 0) {
            return done();
          }
          return _this.runDownMigration(_this.migrations[latestIndex], done);
        };
      })(this));
    };

    Migrator.prototype.reset = function(done) {
      return this.getLatestMigrationIndex((function(_this) {
        return function(error, latestIndex) {
          var migrations;
          if (error != null) {
            return done(error);
          }
          migrations = _this.getDownMigrations(latestIndex);
          return _this.runDownMigrations(migrations, done);
        };
      })(this));
    };

    Migrator.prototype.runUpMigration = function(migration, done) {
      return migration.up((function(_this) {
        return function(error) {
          if (error != null) {
            return done(error);
          }
          return _this.storageAdapter.setLatestMigrationId(migration.id, done);
        };
      })(this));
    };

    Migrator.prototype.runUpMigrations = function(migrations, done) {
      return $async.eachSeries(migrations, this.runUpMigration.bind(this), done);
    };

    Migrator.prototype.runDownMigration = function(migration, done) {
      return migration.down((function(_this) {
        return function(error) {
          var index, latestMigration;
          if (error != null) {
            return done(error);
          }
          index = _this.findMigrationIndexById(migration.id);
          latestMigration = _this.migrations[index - 1];
          return _this.storageAdapter.setLatestMigrationId(latestMigration != null ? latestMigration.id : void 0, done);
        };
      })(this));
    };

    Migrator.prototype.runDownMigrations = function(migrations, done) {
      return $async.eachSeries(migrations, this.runDownMigration.bind(this), done);
    };

    return Migrator;

  })();
  CLI = (function() {
    function CLI() {}

    CLI.prototype.getHelp = function() {
      var cmd;
      cmd = $path.basename($process.argv[1]);
      return "Usage: " + cmd + " <options...> <command>\n\noptions:\n  -h, --help                   show this help screen\n  -e, --example                show an example migrator factory\n  -f, --factory=factory_path   path to the migrator factory\n                               defaults to \"migratorFactory.js\"\n\ncommands:\n  migrate\n    Migrate to the (optional) target migration id\n  rollback\n    Roll back the latest migration\n  reset\n    Roll back all migrations\n  info\n    Show migration information\n\nfactory:\n  A javascript file that exports a single async factory method,\n  returning a migrator instance for the CLI.";
    };

    CLI.prototype.showHelp = function(code) {
      if (code == null) {
        code = 0;
      }
      $process.stdout.write(this.getHelp() + "\n");
      return $process.exit(code);
    };

    CLI.prototype.getExample = function() {
      return "// file: \"migratorFactory.js\"\nvar MyDBLib = require(\"my-db-lib\");\nvar MyDBAdapter = require(\"my-db-adapter\");\nvar MyDBMigrations = require(\"my-db-migrations\");\nvar Migrator = require(\"boco-migrate\").Migrator;\n\nmodule.exports = function(done) {\n\n  MyDBLib.connect(function(error, db) {\n    var adapter = new MyDBAdapter({ db: db });\n    var migrator = new Migrator({ adapter: adapter });\n    var migrations = MyDBMigrations.configure({ db: db });\n\n    migrations.forEach(function(migration) {\n      migrator.addMigration(migration);\n    });\n\n    return done(null, migrator);\n};";
    };

    CLI.prototype.showExample = function() {
      return $process.stdout.write(this.getExample() + "\n");
    };

    CLI.prototype.getMigrator = function(factoryPath, done) {
      var path;
      path = $path.resolve($process.cwd(), factoryPath);
      if (!/^[\\\/]/.test(path)) {
        path = "./" + path;
      }
      return require(path)(done);
    };

    CLI.prototype.migrate = function(migrator, targetId, done) {
      return migrator.migrate(targetId, done);
    };

    CLI.prototype.rollback = function(migrator, done) {
      return migrator.rollback(done);
    };

    CLI.prototype.reset = function(migrator, done) {
      return migrator.reset(done);
    };

    CLI.prototype.info = function(migrator, done) {
      return migrator.getLatestMigrationIndex(function(error, latestIndex) {
        var migrations, pendingCount;
        if (error != null) {
          return done(error);
        }
        migrations = migrator.migrations;
        pendingCount = migrations.length - 1 - latestIndex;
        $process.stdout.write("key: [ - previous | > latest | + pending ]\n\n");
        migrations.forEach(function(migration, index) {
          var id, key, line, name, ref6;
          id = migration.id, name = (ref6 = migration.name) != null ? ref6 : '';
          if (index < latestIndex) {
            key = "-";
          }
          if (index === latestIndex) {
            key = ">";
          }
          if (index > latestIndex) {
            key = "+";
          }
          line = [key, id, name].join(" ");
          return $process.stdout.write(line + "\n");
        });
        $process.stdout.write("\nYou have " + pendingCount + " pending migrations\n");
        return done();
      });
    };

    CLI.prototype.getParams = function() {
      var argv, minimist, params;
      argv = $process.argv.slice(2);
      minimist = $minimist(argv, {
        boolean: ["example", "help"],
        string: ["factory"],
        "default": {
          factory: "migratorFactory.js"
        },
        alias: {
          help: "h",
          factory: "f",
          example: "e"
        }
      });
      return params = {
        help: minimist.help,
        example: minimist.example,
        command: minimist._[0],
        factory: minimist.factory,
        args: minimist._.slice(1)
      };
    };

    CLI.prototype.run = function() {
      var args, command, done, example, factory, help, params;
      params = this.getParams();
      help = params.help, example = params.example, command = params.command, factory = params.factory, args = params.args;
      if (help) {
        return this.showHelp();
      }
      if (example) {
        return this.showExample();
      }
      done = function(error) {
        if (error != null) {
          throw error;
        }
        return $process.exit();
      };
      if (factory == null) {
        return done("missing option: --factory");
      }
      return this.getMigrator(factory, (function(_this) {
        return function(error, migrator) {
          if (error != null) {
            return done(error);
          }
          switch (command) {
            case "migrate":
              return _this.migrate(migrator, args[0], done);
            case "rollback":
              return _this.rollback(migrator, done);
            case "reset":
              return _this.reset(migrator, done);
            case "info":
              return _this.info(migrator, done);
            default:
              return _this.showHelp(1);
          }
        };
      })(this));
    };

    return CLI;

  })();
  return BocoMigrate = {
    MigrateError: MigrateError,
    IrreversibleMigration: IrreversibleMigration,
    NotImplemented: NotImplemented,
    MigrationNotFound: MigrationNotFound,
    Migration: Migration,
    StorageAdapter: StorageAdapter,
    FileStorageAdapter: FileStorageAdapter,
    RedisStorageAdapter: RedisStorageAdapter,
    Migrator: Migrator,
    CLI: CLI
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
